{"version":3,"sources":["tooltip/tooltip.js"],"names":["angular","module","provider","defaults","this","animation","customClass","prefixClass","prefixEvent","container","target","placement","template","contentTemplate","trigger","keyboard","html","show","title","type","delay","autoClose","$get","$window","$rootScope","$compile","$q","$templateCache","$http","$animate","dimensions","$$rAF","$parse","TooltipFactory","element","config","bindAutoCloseEvents","$timeout","tipElement","on","stopEventPropagation","$body","$tooltip","hide","_autoCloseEventsBinded","unbindAutoCloseEvents","off","getPosition","options","offset","position","getCalculatedOffset","actualWidth","actualHeight","split","top","height","left","width","nodeName","toLowerCase","$options","extend","$promise","fetchTemplate","scope","$scope","$new","isObject","isString","map","parseFloat","length","$hide","$$postDigest","$show","$toggle","toggle","$isShown","timeout","hoverState","then","templateEl","contentEl","findElement","removeAttr","outerHTML","tipLinker","tipTemplate","tipContainer","data","replace","htmlReplaceRegExp","trim","apply","init","isNumber","isElement","triggers","forEach","$","evt","find","enter","leave","isTouch","$onFocusElementMouseDown","focus","destroy","i","remove","clearTimeout","$destroy","setTimeout","$emit","parent","after","$element","css","display","visibility","addClass","$$phase","$root","$digest","$applyPlacement","$onKeyUp","$onFocusKeyUp","blur","stopImmediatePropagation","elementPosition","tipWidth","prop","tipHeight","tipPosition","which","preventDefault","stopPropagation","query","document","querySelectorAll","when","get","res","put","String","prototype","directive","$location","$sce","restrict","link","attr","key","isDefined","$observe","newValue","oldValue","trustAsHtml","tooltip","bsTooltip","$watch","bsShow","match","$on"],"mappings":"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","file":"tooltip.min.js","sourcesContent":["/* global angular */\n'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      template: 'tooltip/tooltip.tpl.html',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, dimensions, $$rAF, $parse) {\n\n      var trim = String.prototype.trim;\n      var isTouch = 'createTouch' in $window.document;\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var nodeName = element[0].nodeName.toLowerCase();\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        $tooltip.$promise = fetchTemplate(options.template);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n        if (options.delay) {\n          if (angular.isObject($parse(options.delay)(scope))) {\n            options.delay = $parse(options.delay)(scope);\n          } else if(angular.isString(options.delay)) {\n            var split = options.delay.split(',').map(parseFloat);\n            options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n          }\n\n        }\n\n        // Support scope as string options\n        if(options.title) {\n          $tooltip.$scope.title = options.title;\n        }\n\n        // Provide scope helpers\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $tooltip.toggle();\n          });\n        };\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout, hoverState;\n\n        // Support contentTemplate option\n        if(options.contentTemplate) {\n          $tooltip.$promise = $tooltip.$promise.then(function(template) {\n            var templateEl = angular.element(template);\n            return fetchTemplate(options.contentTemplate)\n            .then(function(contentTemplate) {\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]);\n              if(!contentEl.length) contentEl = findElement('[ng-bind=\"title\"]', templateEl[0]);\n              contentEl.removeAttr('ng-bind').html(contentTemplate);\n              return templateEl[0].outerHTML;\n            });\n          });\n        }\n\n        // Fetch, compile then initialize tooltip\n        var tipLinker, tipElement, tipTemplate, tipContainer;\n        $tooltip.$promise.then(function(template) {\n          if(angular.isObject(template)) template = template.data;\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\n          template = trim.apply(template);\n          tipTemplate = template;\n          tipLinker = $compile(template);\n          $tooltip.init();\n        });\n\n        $tooltip.init = function() {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if(options.container === 'self') {\n            tipContainer = element;\n          } else if(angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if(options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function(trigger) {\n            if(trigger === 'click') {\n              $('body').on('click', function (evt) {\n                if (tipElement && !tipElement.find(evt.target).length && $tooltip.$isShown) {\n                  $tooltip.toggle(evt);\n                }\n              });\n              element.on('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          });\n\n          // Options: target\n          if(options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target)[0];\n          }\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function() {\n\n          // Unbind events\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if(trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          }\n\n          if($tooltip.$isShown && tipElement !==null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n          }\n\n          // Remove element\n          if(tipElement) {\n            tipElement.remove();\n            tipElement = null;\n          }\n\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function() {\n            if (hoverState ==='in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function() {\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent = options.container ? tipContainer : null;\n          var after = options.container ? null : element;\n\n          // Hide any existing tipElement\n          if(tipElement) tipElement.remove();\n          // Fetch a cloned element linked from template\n          tipElement = $tooltip.$element = tipLinker(scope, function(clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', display: 'block', visibility: 'hidden'}).addClass(options.placement);\n\n          // Options: animation\n          if(options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if(options.customClass) tipElement.addClass(options.customClass);\n\n          $animate.enter(tipElement, parent, after, function() {\n            scope.$emit(options.prefixEvent + '.show', $tooltip);\n          });\n          $tooltip.$isShown = scope.$isShown = true;\n          scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n          $$rAF(function () {\n            $tooltip.$applyPlacement();\n\n            // Once placed, make the tooltip visible\n            tipElement.css({visibility: 'visible'});\n          }); // var a = bodyEl.offsetWidth + 1; ?\n\n          // Bind events\n          if(options.keyboard) {\n            if(options.trigger !== 'focus') {\n              $tooltip.focus();\n              tipElement.on('keyup', $tooltip.$onKeyUp);\n            } else {\n              element.on('keyup', $tooltip.$onFocusKeyUp);\n            }\n          }\n\n          if(options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        $tooltip.leave = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        $tooltip.hide = function(blur) {\n\n          if(!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          $animate.leave(tipElement, function() {\n            scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n            // Allow to blur the input when hidden, like when pressing enter key\n            if(blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n          });\n\n          $tooltip.$isShown = scope.$isShown = false;\n          scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n\n          // Unbind events\n          if(options.keyboard && tipElement !== null) {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          }\n\n          if(options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n\n        };\n\n        $tooltip.toggle = function(evt) {\n          if (evt) {\n            evt.stopImmediatePropagation();\n          }\n          scope.$emit(options.prefixEvent + '.toggle', $tooltip);\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\n        };\n\n        $tooltip.focus = function() {\n          tipElement[0].focus();\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function() {\n          if(!tipElement) return;\n\n          // Get the position of the tooltip element.\n          var elementPosition = getPosition();\n\n          // Get the height and width of the tooltip so we can center it.\n          var tipWidth = tipElement.prop('offsetWidth'),\n              tipHeight = tipElement.prop('offsetHeight');\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(options.placement, elementPosition, tipWidth, tipHeight);\n\n          // Now set the calculated positioning.\n          tipPosition.top += 'px';\n          tipPosition.left += 'px';\n          tipElement.css(tipPosition);\n\n        };\n\n        $tooltip.$onKeyUp = function(evt) {\n          evt.which === 27 && $tooltip.hide();\n        };\n\n        $tooltip.$onFocusKeyUp = function(evt) {\n          evt.which === 27 && element[0].blur();\n        };\n\n        $tooltip.$onFocusElementMouseDown = function(evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\n        };\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        // Private methods\n\n        function getPosition() {\n          if(options.container === 'body') {\n            return dimensions.offset(options.target[0] || element[0]);\n          } else {\n            return dimensions.position(options.target[0] || element[0]);\n          }\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n          case 'right':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left + position.width\n            };\n            break;\n          case 'bottom':\n            offset = {\n              top: position.top + position.height,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          case 'left':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left - actualWidth\n            };\n            break;\n          default:\n            offset = {\n              top: position.top - actualHeight,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          }\n\n          if(!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if(split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n            case 'left':\n              offset.left = position.left;\n              break;\n            case 'right':\n              offset.left =  position.left + position.width - actualWidth;\n            }\n          } else if(split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n            case 'top':\n              offset.top = position.top - actualHeight;\n              break;\n            case 'bottom':\n              offset.top = position.top + position.height;\n            }\n          }\n\n          return offset;\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      function fetchTemplate(template) {\n        return $q.when($templateCache.get(template) || $http.get(template))\n        .then(function(res) {\n          if(angular.isObject(res)) {\n            $templateCache.put(template, res.data);\n            return res.data;\n          }\n          return res;\n        });\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'target', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'type', 'customClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Observe scope attributes for change\n        angular.forEach(['title'], function(key) {\n          attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && $$rAF(function() {\n              tooltip && tooltip.$applyPlacement();\n            });\n          });\n        });\n\n        // Support scope as an object\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.title = newValue;\n          }\n          angular.isDefined(oldValue) && $$rAF(function() {\n            tooltip && tooltip.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = newValue.match(',?(tooltip),?');\n          newValue === true ? tooltip.show() : tooltip.hide();\n        });\n\n        // Initialize popover\n        var tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}